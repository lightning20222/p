2. Program
            puts "Hello World!!"
            puts "\nEnter 1st number: "
            gets stdin num1
            puts "\nEnter 2nd number: "
            gets stdin num2
            puts "\nAddition: [expr $num1 + $num2]"
            puts "Subtraction: [expr $num1-$num2]"
            puts "Multiplication: [expr $num1 * $num2]"
            puts "Division: [expr $num1 / $num2]"

            TO RUN (\apps\bin): ns hello.tcl

3. 2-Node

            #Create a simulator object
            set ns [new Simulator]

            #Open the nam trace file
            set nf [open out.nam w]
            $ns namtrace-all $nf

            #Define a 'finish' procedure
            proc finish {} {
            global ns nf
            $ns flush-trace
            #Close the trace file
            close $nf
            #Execute nam on the trace file
            exec nam out.nam &
            exit 0
            }

            #Create two nodes
            set n0 [$ns node]
            set n1 [$ns node]
            $ns color n0 Blue

            #Create a duplex link between the nodes
            $ns duplex-link $n0 $n1 1Mb 10ms DropTail

            #Create a UDP agent and attach it to node n0
            set udp0 [new Agent/UDP]
            $ns attach-agent $n0 $udp0

            # Create a CBR traffic source and attach it to udp0
            set cbr0 [new Application/Traffic/CBR]
            $cbr0 set packetSize_ 500
            $cbr0 set interval_ 0.005
            $cbr0 attach-agent $udp0

            #Create a Null agent (a traffic sink) and attach it to node n1
            set null0 [new Agent/Null]
            $ns attach-agent $n1 $null0

            #Connect the traffic source with the traffic sink
            $ns connect $udp0 $null0

            #Schedule events for the CBR agent
            $ns at 0.5 "$cbr0 start"
            $ns at 4.5 "$cbr0 stop"

            #Call the finish procedure after 5 seconds of simulation time
            $ns at 5.0 "finish"

            #Run the simulation
            $ns run
         
4. 4-node

            #Create a simulator object
            set ns [new Simulator]

            #Define different colors for data flows
            $ns color 1 Blue
            $ns color 2 Red

            #Open the nam trace file
            set nf [open out.nam w]
            $ns namtrace-all $nf

            #Define a 'finish' procedure
            proc finish {} {
            global ns nf
            $ns flush-trace
            #Close the trace file
            close $nf
            #Execute nam on the trace file
            exec nam out.nam &
            exit 0
            }

            #Create four nodes
            set n0 [$ns node]
            set n1 [$ns node]
            set n2 [$ns node]
            set n3 [$ns node]

            #Create links between the nodes
            $ns duplex-link $n0 $n2 1Mb 10ms DropTail
            $ns duplex-link $n1 $n2 1Mb 10ms DropTail
            $ns duplex-link $n3 $n2 1Mb 10ms SFQ

            $ns duplex-link-op $n0 $n2 orient right-down
            $ns duplex-link-op $n1 $n2 orient right-up
            $ns duplex-link-op $n2 $n3 orient right

            #Monitor the queue for the link between node 2 and node 3
            $ns duplex-link-op $n2 $n3 queuePos 0.5

            #Create a UDP agent and attach it to node n0
            set udp0 [new Agent/UDP]
            $udp0 set class_ 1
            $ns attach-agent $n0 $udp0

            # Create a CBR traffic source and attach it to udp0
            set cbr0 [new Application/Traffic/CBR]
            $cbr0 set packetSize_ 500
            $cbr0 set interval_ 0.005
            $cbr0 attach-agent $udp0

            #Create a UDP agent and attach it to node n1
            set udp1 [new Agent/UDP]
            $udp1 set class_ 2
            $ns attach-agent $n1 $udp1

            # Create a CBR traffic source and attach it to udp1
            set cbr1 [new Application/Traffic/CBR]
            $cbr1 set packetSize_ 500
            $cbr1 set interval_ 0.005
            $cbr1 attach-agent $udp1

            #Create a Null agent (a traffic sink) and attach it to node n3
            set null0 [new Agent/Null]
            $ns attach-agent $n3 $null0

            #Connect the traffic sources with the traffic sink
            $ns connect $udp0 $null0
            $ns connect $udp1 $null0

            #Schedule events for the CBR agents
            $ns at 0.5 "$cbr0 start"
            $ns at 1.0 "$cbr1 start"
            $ns at 4.0 "$cbr1 stop"
            $ns at 4.5 "$cbr0 stop"

            #Call the finish procedure after 5 seconds of simulation time
            $ns at 5.0 "finish"

            #Run the simulation
            $ns run
                  
5. Ring topology 

               #Create a simulator object
            set ns [new Simulator]
                     
            #Tell the simulator to use dynamic routing
            $ns rtproto DV
                     
            #Open the nam trace file
            set nf [open out.nam w]
            $ns namtrace-all $nf
                     
            #Define a 'finish' procedure
            proc finish {} {
            global ns nf
            $ns flush-trace
            #Close the trace file
            close $nf
            #Execute nam on the trace file
            exec nam out.nam &
            exit 0
            }

            #Create seven nodes
            for {set i 0} {$i < 7} {incr i} {
            set n($i) [$ns node]
            $ns color n($i) Blue
            }

            #Create links between the nodes
            for {set i 0} {$i < 7} {incr i} {
            $ns duplex-link $n($i) $n([expr ($i+1)%7]) 1Mb 10ms DropTail
            }

            #Create a UDP agent and attach it to node n(0)
            set udp0 [new Agent/UDP]
            $ns attach-agent $n(0) $udp0

            # Create a CBR traffic source and attach it to udp0
            set cbr0 [new Application/Traffic/CBR]
            $cbr0 set packetSize_ 500
            $cbr0 set interval_ 0.005
            $cbr0 attach-agent $udp0

            #Create a Null agent (a traffic sink) and attach it to node n(3)
            set null0 [new Agent/Null]
            $ns attach-agent $n(3) $null0

            #Connect the traffic source with the traffic sink
            $ns connect $udp0 $null0

            #Schedule events for the CBR agent and the network dynamics
            $ns at 0.5 "$cbr0 start"
            $ns rtmodel-at 1.0 down $n(1) $n(2)
            $ns rtmodel-at 2.0 up $n(1) $n(2)
            $ns at 4.5 "$cbr0 stop"

            #Call the finish procedure after 5 seconds of simulation time
            $ns at 5.0 "finish"

            #Run the simulation
            $ns run
         
6.trace

            #Create a simulator object
            set ns [new Simulator]

            #Define different colors for data flows (for NAM)
            $ns color 1 Blue
            $ns color 2 Red

            #Open the NAM trace file
            set nf [open exp5.nam w]
            $ns namtrace-all $nf

            #Open the Trace file
            set tf [open exp5.tr w]
            $ns trace-all $tf

            #Define a 'finish' procedure
            proc finish {} {
            global ns nf tf
            $ns flush-trace
            #Close the NAM trace file
            close $nf
            #Close the Trace file
            close $tf
            #Execute NAM on the trace file
            exec nam exp5.nam &
            exit 0
            }

            #Create four nodes
            set n0 [$ns node]
            set n1 [$ns node]
            set n2 [$ns node]
            set n3 [$ns node]

            #Create links between the nodes
            $ns duplex-link $n0 $n2 2Mb 10ms DropTail
            $ns duplex-link $n1 $n2 2Mb 10ms DropTail
            $ns duplex-link $n2 $n3 1.7Mb 20ms DropTail

            #Set Queue Size of link (n2-n3) to 10
            $ns queue-limit $n2 $n3 10

            #Give node position (for NAM)
            #$ns duplex-link-op $n0 $n2 orient right-down
            #$ns duplex-link-op $n1 $n2 orient right-up
            #$ns duplex-link-op $n2 $n3 orient right

            #Monitor the queue for link (n2-n3). (for NAM)
            #$ns duplex-link-op $n2 $n3 queuePos 0.5

            #Setup a TCP connection
            set tcp [new Agent/TCP]
            $tcp set class_ 2
            $ns attach-agent $n0 $tcp
            set sink [new Agent/TCPSink]
            $ns attach-agent $n3 $sink
            $ns connect $tcp $sink
            $tcp set fid_ 1

            #Setup a FTP over TCP connection
            set ftp [new Application/FTP]
            $ftp attach-agent $tcp
            $ftp set type_ FTP

            #Setup a UDP connection
            set udp [new Agent/UDP]
            $ns attach-agent $n1 $udp
            set null [new Agent/Null]
            $ns attach-agent $n3 $null
            $ns connect $udp $null
            $udp set fid_ 2

            #Setup a CBR over UDP connection
            set cbr [new Application/Traffic/CBR]
            $cbr attach-agent $udp
            $cbr set type_ CBR
            $cbr set packet_size_ 1000
            $cbr set rate_ 1mb
            $cbr set random_ false

            #Schedule events for the CBR and FTP agents
            $ns at 0.1 "$cbr start"
            $ns at 1.0 "$ftp start"
            $ns at 3.0 "$ftp stop"
            $ns at 3.5 "$cbr stop"

            #Call the finish procedure after 5 seconds of simulation time
            $ns at 4.0 "finish"

            #Print CBR packet size and interval
            puts "CBR packet size = [$cbr set packet_size_]"
            puts "CBR interval = [$cbr set interval_]"

            #Run the simulation
            $ns run
